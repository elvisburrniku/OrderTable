üí° Prompt for AI Agent:
Objective:
Build a 1:1 clone of Google Calendar within a dashboard application, repurposed for restaurant booking management, while preserving all core Google Calendar features (e.g. month/week/day view, drag-to-book, rescheduling, overlapping detection, etc.). The system must handle restaurant-specific needs such as managing tables, time slots, guests, and booking statuses, and must present this in a way that is clear and not visually awkward.

üîß Core Features to Clone from Google Calendar:
Full calendar UI (month, week, day view)

Time slots with drag-and-drop to create or move events

Overlapping event warnings

Recurring event support

Zoom in/out of time granularity

Event detail popup/modals (title, description, time, etc.)

Color-coded events

Filtering/calendar switching

üçΩÔ∏è Restaurant-Specific Enhancements:
1. Table Representation

Each calendar event should represent a table reservation.

Each table (e.g., Table 1, Table 2, etc.) should be a calendar resource similar to how Google Calendar handles multiple calendars.

Tables should appear as "columns" in day/week view, much like how Google Calendar shows multiple calendars side by side.

Use table-specific colors or labels for clarity (e.g., Table 1 = blue, Table 2 = green).

In day view:

y-axis = time slots
x-axis = individual tables (or vice versa in an alternate view)

2. Event Structure (Reservation Block)

Event title = Customer name

Description = Phone number, special request, booking source

Custom fields: number of guests, assigned waiter, status (confirmed, pending, no-show, completed)

Color-code status (e.g., red for no-show, green for confirmed)

3. Visual/UX Suggestions:

Offer a "Split View" for tables:

Top: Mini map of restaurant layout (for visual positioning)

Bottom: Calendar-style schedule with time and table axis

Implement tooltips or hover states to preview customer details

Enable view toggling:

View by table

View by waiter

View by booking status

4. Availability Check & Constraints

Prevent double-booking on the same table

Support overlap detection and warnings

Define default time slot duration (e.g., 90 minutes per booking)

Allow for buffer times between bookings

5. Advanced Booking Logic

Recurring reservations (e.g., daily at 7 PM)

Group reservations (multiple tables for 1 party)

Walk-in slot suggestions

Waitlist handling (optionally show pending reservations below table rows)

üõ†Ô∏è Technical Implementation Tips:
Use libraries like FullCalendar.io for base UI (supports resources/timeline view).

Store table data as "resources" and reservations as "events" in FullCalendar.

Backed by a database model:

json
Copy
Edit
{
  "table_id": 1,
  "customer_name": "John Doe",
  "start_time": "2025-06-12T19:00:00",
  "end_time": "2025-06-12T20:30:00",
  "status": "confirmed",
  "guests": 4,
  "notes": "Birthday request",
  "waiter_id": 3
}
REST API or GraphQL to handle CRUD for bookings

Optional: WebSocket for real-time updates in multi-admin dashboards

‚úÖ Goals
Functionally identical to Google Calendar (UX-wise)

Tailored to restaurant operations

Visual presentation is clear and aesthetically pleasing

Easy to onboard staff to use this calendar as the central booking tool

